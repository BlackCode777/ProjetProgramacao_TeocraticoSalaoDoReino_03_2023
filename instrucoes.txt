
install:
        ng add @fortawesome/angular-fontawesome@0.12
        ng add @ng-bootstrap/ng-bootstrap
        ng add mdb-angular-ui-kit
        npm i bootstrap-dropdown-button
        npm i bootstrap@5.3.0-alpha3

creating apps:
        ng generate module icons
        ng generate module home --route home --module app.module
        ng generate module login --route login --module app.module

        ng generate module dashboard
        ng generate  dashboard --route
        
        ng generate c /dashboard/dashboard

        ng generate m home --routing
        ng generate c home

        ng generate m usuario --routing
        ng generate c usuario/usuarioCadastro
        ng generate c usuario/usuarioListagem

transformação de regras de negócio em codigo:
        Transformar regras de negócio em código TypeScript envolve traduzir as especificações e lógicas do domínio em funções e classes que possam 
        ser executadas em um ambiente de desenvolvimento. Aqui estão algumas etapas gerais que você pode seguir para fazer isso:

        Entenda as regras de negócio: Familiarize-se completamente com as regras de negócio, seja por meio de documentação, discussões com 
        especialistas do domínio ou análise de casos de uso.

        Identifique os conceitos do domínio: Identifique os principais conceitos e entidades envolvidos nas regras de negócio. Esses conceitos podem 
        se tornar classes no seu código TypeScript.

        Modele as classes: Crie classes TypeScript que representem as entidades do domínio. Defina as propriedades e métodos necessários para cada classe.

        Implemente a lógica das regras de negócio: Traduza as regras de negócio em lógica de programação. Isso pode incluir condicionais, loops e 
        cálculos específicos do domínio. Implemente essas regras de negócio nos métodos das classes relevantes.

        Validação de entrada: Identifique as validações necessárias para garantir que os dados de entrada atendam aos requisitos das regras de negócio. 
        Implemente essas validações em métodos separados ou nas próprias classes relevantes.

        Teste: Crie testes unitários para validar o comportamento das classes e métodos implementados. Isso ajuda a garantir que as regras de negócio 
        estejam sendo seguidas corretamente.

        Integração com outros componentes: Seu código de regras de negócio pode precisar interagir com outros componentes do sistema, como bancos 
        de dados ou APIs externas. Certifique-se de incorporar essas interações no código de acordo com os requisitos.

        Documentação: Documente adequadamente o código para facilitar a manutenção e o entendimento futuro das regras de negócio implementadas.

        Essas etapas fornecem uma estrutura geral para traduzir as regras de negócio em código TypeScript. No entanto, cada projeto pode ter suas 
        particularidades, então adapte essas etapas conforme necessário para atender às necessidades específicas da sua aplicação.
                

                